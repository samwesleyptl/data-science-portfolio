{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"NextGrowthLabs","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPEqHM0Y4jA9dVavmRklDra"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":3,"metadata":{"id":"c2w4-K2GYTUj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1645098068442,"user_tz":-330,"elapsed":6599,"user":{"displayName":"Sam Wesley","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHpTbOrzJ45QxbnmAyjy2tgiaN8dNJCj-aYC67=s64","userId":"01831065269284215559"}},"outputId":"f2c4547a-7b1d-45b2-e0f0-8935f282060d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting Flask-Excel\n","  Downloading Flask_Excel-0.0.7-py2.py3-none-any.whl (12 kB)\n","Requirement already satisfied: Flask>=0.10.1 in /usr/local/lib/python3.7/dist-packages (from Flask-Excel) (1.1.4)\n","Collecting pyexcel-webio>=0.1.2\n","  Downloading pyexcel_webio-0.1.4-py2.py3-none-any.whl (11 kB)\n","Requirement already satisfied: click<8.0,>=5.1 in /usr/local/lib/python3.7/dist-packages (from Flask>=0.10.1->Flask-Excel) (7.1.2)\n","Requirement already satisfied: itsdangerous<2.0,>=0.24 in /usr/local/lib/python3.7/dist-packages (from Flask>=0.10.1->Flask-Excel) (1.1.0)\n","Requirement already satisfied: Jinja2<3.0,>=2.10.1 in /usr/local/lib/python3.7/dist-packages (from Flask>=0.10.1->Flask-Excel) (2.11.3)\n","Requirement already satisfied: Werkzeug<2.0,>=0.15 in /usr/local/lib/python3.7/dist-packages (from Flask>=0.10.1->Flask-Excel) (1.0.1)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from Jinja2<3.0,>=2.10.1->Flask>=0.10.1->Flask-Excel) (2.0.1)\n","Collecting pyexcel>=0.5.6\n","  Downloading pyexcel-0.7.0-py2.py3-none-any.whl (87 kB)\n","\u001b[K     |████████████████████████████████| 87 kB 2.4 MB/s \n","\u001b[?25hCollecting lml>=0.0.4\n","  Downloading lml-0.1.0-py2.py3-none-any.whl (10 kB)\n","Requirement already satisfied: chardet in /usr/local/lib/python3.7/dist-packages (from pyexcel>=0.5.6->pyexcel-webio>=0.1.2->Flask-Excel) (3.0.4)\n","Collecting texttable>=0.8.2\n","  Downloading texttable-1.6.4-py2.py3-none-any.whl (10 kB)\n","Collecting pyexcel-io>=0.6.2\n","  Downloading pyexcel_io-0.6.6-py2.py3-none-any.whl (44 kB)\n","\u001b[K     |████████████████████████████████| 44 kB 1.9 MB/s \n","\u001b[?25hInstalling collected packages: lml, texttable, pyexcel-io, pyexcel, pyexcel-webio, Flask-Excel\n","Successfully installed Flask-Excel-0.0.7 lml-0.1.0 pyexcel-0.7.0 pyexcel-io-0.6.6 pyexcel-webio-0.1.4 texttable-1.6.4\n"]}],"source":["pip install Flask-Excel"]},{"cell_type":"markdown","source":["# New Section"],"metadata":{"id":"M4uSvHoiaCKk"}},{"cell_type":"code","source":["\n","pip install pandas\n","\n","pip install numpy\n","\n","pip install numpyencoder\n","from flask import Flask, request,render_template, jsonify, redirect, url_for\n","import flask_excel as excel\n","\n","import pandas as pd\n","import numpy as np\n","from numpyencoder import NumpyEncoder\n","app = Flask(__name__)\n","excel.init_excel(app)\n","@app.route('/login', methods=['GET', 'POST'])\n","def login():\n","    error = None\n","    if request.method == 'POST':\n","        if request.form['username'] != 'admin' or request.form['password'] != 'admin':\n","            error = 'Invalid Credentials. Please try again.'\n","        else:\n","            return redirect(url_for('upload_file'))\n","    return '''\n","    <!doctype html>\n","    <title>Login</title>\n","    <h1>Authentication</h1>\n","    <form action=\"\" method=post enctype=multipart/form-data><p>\n","    <input type=\"text\" placeholder=\"Username\" name=\"username\" value=\"\">\n","         <input type=\"password\" placeholder=\"Password\" name=\"password\" value=\"\">\n","    <input class=\"btn btn-default\" type=\"submit\" value=\"Login\">\n","    </form>\n","    '''\n","\n","@app.route(\"/upload\", methods=['GET', 'POST'])\n","def upload_file():\n","    if request.method == 'POST':\n","        df=pd.DataFrame(np.array(request.get_array(field_name='file')[1:]),columns=np.array(request.get_array(field_name='file')[0]))\n","        print(df)\n","        positive=''\n","        negative=''\n","        #print(df.to_string()) \n","        print(df['Text'][1])\n","        print(len(df['Star'][:]))\n","        l=len(df['Star'][:])\n","        for i in range(l):\n","            if df['Star'][i]>1:\n","                positive+=str(df['Text'][i])\n","            else:\n","                negative+=str(df['Text'][i])\n","        print(positive)\n","        print(negative)\n","        mismatch=[]\n","        for i in range(l):\n","            if int(df['Star'][i])<=1:\n","                 if positive.count(df['Text'][i])>negative.count(df['Text'][i]):\n","                     mismatch.append(int(i))\n","        print(mismatch)\n","        return jsonify({\"result\": df.iloc[mismatch].to_numpy().tolist()})\n","    return '''\n","    <!doctype html>\n","    <title>Upload an excel file</title>\n","    <h1>Excel file upload (csv, tsv, csvz, tsvz only)</h1>\n","    <form action=\"\" method=post enctype=multipart/form-data><p>\n","    <input type=file name=file><input type=submit value=Upload>\n","    </form>\n","    '''\n","\n","\n","@app.route(\"/download\", methods=['GET'])\n","def download_file():\n","    return excel.make_response_from_array([[1, 2], [3, 4]], \"csv\")\n","\n","from flask_sqlalchemy import SQLAlchemy  # noqa\n","from datetime import datetime  # noqa\n","\n","app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///tmp.db'\n","app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n","db = SQLAlchemy(app)\n","\n","\n","class Post(db.Model):\n","    id = db.Column(db.Integer, primary_key=True)\n","    title = db.Column(db.String(80))\n","    body = db.Column(db.Text)\n","    pub_date = db.Column(db.DateTime)\n","\n","    category_id = db.Column(db.Integer, db.ForeignKey('category.id'))\n","    category = db.relationship('Category',\n","                               backref=db.backref('posts',\n","                                                  lazy='dynamic'))\n","\n","    def __init__(self, title, body, category, pub_date=None):\n","        self.title = title\n","        self.body = body\n","        if pub_date is None:\n","            pub_date = datetime.utcnow()\n","        self.pub_date = pub_date\n","        self.category = category\n","\n","    def __repr__(self):\n","        return '<Post %r>' % self.title\n","\n","\n","class Category(db.Model):\n","    id = db.Column(db.Integer, primary_key=True)\n","    name = db.Column(db.String(50))\n","\n","    def __init__(self, name):\n","        self.name = name\n","\n","    def __repr__(self):\n","        return '<Category %r>' % self.name\n","\n","\n","db.create_all()\n","\n","\n","@app.route(\"/import\", methods=['GET', 'POST'])\n","def doimport():\n","    if request.method == 'POST':\n","\n","        def category_init_func(row):\n","            c = Category(row['name'])\n","            c.id = row['id']\n","            return c\n","\n","        def post_init_func(row):\n","            c = Category.query.filter_by(name=row['category']).first()\n","            p = Post(row['title'], row['body'], c, row['pub_date'])\n","            return p\n","        try:\n","            request.save_to_database(\n","            field_name='file', session=db.session,\n","            tables=[Category, Post],\n","            initializers=[category_init_func, post_init_func])\n","            db.session.commit()\n","        except:\n","            db.session.rollback()\n","        return redirect(url_for('.handson_table'), code=302)\n","    return '''\n","    <!doctype html>\n","    <title>Upload an excel file</title>\n","    <h1>Excel file upload (xls, xlsx, ods please)</h1>\n","    <form action=\"\" method=post enctype=multipart/form-data><p>\n","    <input type=file name=file><input type=submit value=Upload>\n","    </form>\n","    '''\n","\n","\n","@app.route(\"/export\", methods=['GET'])\n","def doexport():\n","    return excel.make_response_from_tables(db.session, [Category, Post], \"xls\")\n","\n","\n","@app.route(\"/custom_export\", methods=['GET'])\n","def docustomexport():\n","    query_sets = Category.query.filter_by(id=1).all()\n","    column_names = ['id', 'name']\n","    return excel.make_response_from_query_sets(query_sets, column_names, \"xls\")\n","\n","\n","@app.route(\"/handson_view\", methods=['GET'])\n","def handson_table():\n","    return excel.make_response_from_tables(\n","        db.session, [Category, Post], 'handsontable.html')\n","\n","\n","if __name__ == \"__main__\":\n","    app.debug = True\n","    app.run()\n"],"metadata":{"id":"eDdnO1nCaDb7","colab":{"base_uri":"https://localhost:8080/","height":130},"executionInfo":{"status":"error","timestamp":1645098081618,"user_tz":-330,"elapsed":641,"user":{"displayName":"Sam Wesley","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHpTbOrzJ45QxbnmAyjy2tgiaN8dNJCj-aYC67=s64","userId":"01831065269284215559"}},"outputId":"5709110a-2529-4f6e-dc32-b3308ae330d2"},"execution_count":4,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-4-6e8705e17aaa>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    pip install pandas\u001b[0m\n\u001b[0m              ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]}]}